{"version":3,"file":"rust.js","sources":["../../../../src/mode/rust/rust.js"],"sourcesContent":["// Source: https://github.com/codemirror/CodeMirror/tree/master/mode/rust/rust.js\nimport simple from \"../../addon/mode/simple\"\nexport default function(CodeMirror) {\n  simple(CodeMirror)\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"rust\",{\n    start: [\n      {regex: /b?\"/, token: \"string\", next: \"string\"},\n      {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n      {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n      {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n      {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n      {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n        token: \"number\"},\n      {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n      {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n      {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n      {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n      {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n        token: [\"keyword\", null ,\"def\"]},\n      {regex: /#!?\\[.*\\]/, token: \"meta\"},\n      {regex: /\\/\\/.*/, token: \"comment\"},\n      {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n      {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n      {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n      {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n      {regex: /[\\{\\[\\(]/, indent: true},\n      {regex: /[\\}\\]\\)]/, dedent: true}\n    ],\n    string: [\n      {regex: /\"/, token: \"string\", next: \"start\"},\n      {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n    ],\n    string_raw: [\n      {regex: /\"/, token: \"string\", next: \"start\"},\n      {regex: /[^\"]*/, token: \"string\"}\n    ],\n    string_raw_hash: [\n      {regex: /\"#+/, token: \"string\", next: \"start\"},\n      {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n    ],\n    comment: [\n      {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n      {regex: /.*/, token: \"comment\"}\n    ],\n    meta: {\n      dontIndentStates: [\"comment\"],\n      electricInput: /^\\s*\\}$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    }\n  });\n\n\n  CodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\n  CodeMirror.defineMIME(\"text/rust\", \"rust\");\n}"],"names":[],"mappings":"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"}